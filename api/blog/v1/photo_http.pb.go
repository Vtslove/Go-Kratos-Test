// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.2.1

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	pagination "kratos-blog/third_party/pagination"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type PhotoServiceHTTPServer interface {
	CreatePhoto(context.Context, *CreatePhotoRequest) (*Photo, error)
	DeletePhoto(context.Context, *DeletePhotoRequest) (*emptypb.Empty, error)
	GetPhoto(context.Context, *GetPhotoRequest) (*Photo, error)
	ListPhoto(context.Context, *pagination.PagingRequest) (*ListPhotoResponse, error)
	UpdatePhoto(context.Context, *UpdatePhotoRequest) (*Photo, error)
}

func RegisterPhotoServiceHTTPServer(s *http.Server, srv PhotoServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/blog/v1/photos", _PhotoService_ListPhoto0_HTTP_Handler(srv))
	r.GET("/blog/v1/photos/{id}", _PhotoService_GetPhoto0_HTTP_Handler(srv))
	r.POST("/blog/v1/photos", _PhotoService_CreatePhoto0_HTTP_Handler(srv))
	r.PUT("/blog/v1/photos/{id}", _PhotoService_UpdatePhoto0_HTTP_Handler(srv))
	r.DELETE("/blog/v1/photos/{id}", _PhotoService_DeletePhoto0_HTTP_Handler(srv))
}

func _PhotoService_ListPhoto0_HTTP_Handler(srv PhotoServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in pagination.PagingRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/blog.v1.PhotoService/ListPhoto")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPhoto(ctx, req.(*pagination.PagingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListPhotoResponse)
		return ctx.Result(200, reply)
	}
}

func _PhotoService_GetPhoto0_HTTP_Handler(srv PhotoServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPhotoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/blog.v1.PhotoService/GetPhoto")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPhoto(ctx, req.(*GetPhotoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Photo)
		return ctx.Result(200, reply)
	}
}

func _PhotoService_CreatePhoto0_HTTP_Handler(srv PhotoServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreatePhotoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/blog.v1.PhotoService/CreatePhoto")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreatePhoto(ctx, req.(*CreatePhotoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Photo)
		return ctx.Result(200, reply)
	}
}

func _PhotoService_UpdatePhoto0_HTTP_Handler(srv PhotoServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdatePhotoRequest
		if err := ctx.Bind(&in.Photo); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/blog.v1.PhotoService/UpdatePhoto")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdatePhoto(ctx, req.(*UpdatePhotoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Photo)
		return ctx.Result(200, reply)
	}
}

func _PhotoService_DeletePhoto0_HTTP_Handler(srv PhotoServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeletePhotoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/blog.v1.PhotoService/DeletePhoto")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeletePhoto(ctx, req.(*DeletePhotoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type PhotoServiceHTTPClient interface {
	CreatePhoto(ctx context.Context, req *CreatePhotoRequest, opts ...http.CallOption) (rsp *Photo, err error)
	DeletePhoto(ctx context.Context, req *DeletePhotoRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetPhoto(ctx context.Context, req *GetPhotoRequest, opts ...http.CallOption) (rsp *Photo, err error)
	ListPhoto(ctx context.Context, req *pagination.PagingRequest, opts ...http.CallOption) (rsp *ListPhotoResponse, err error)
	UpdatePhoto(ctx context.Context, req *UpdatePhotoRequest, opts ...http.CallOption) (rsp *Photo, err error)
}

type PhotoServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewPhotoServiceHTTPClient(client *http.Client) PhotoServiceHTTPClient {
	return &PhotoServiceHTTPClientImpl{client}
}

func (c *PhotoServiceHTTPClientImpl) CreatePhoto(ctx context.Context, in *CreatePhotoRequest, opts ...http.CallOption) (*Photo, error) {
	var out Photo
	pattern := "/blog/v1/photos"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/blog.v1.PhotoService/CreatePhoto"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PhotoServiceHTTPClientImpl) DeletePhoto(ctx context.Context, in *DeletePhotoRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/blog/v1/photos/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/blog.v1.PhotoService/DeletePhoto"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PhotoServiceHTTPClientImpl) GetPhoto(ctx context.Context, in *GetPhotoRequest, opts ...http.CallOption) (*Photo, error) {
	var out Photo
	pattern := "/blog/v1/photos/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/blog.v1.PhotoService/GetPhoto"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PhotoServiceHTTPClientImpl) ListPhoto(ctx context.Context, in *pagination.PagingRequest, opts ...http.CallOption) (*ListPhotoResponse, error) {
	var out ListPhotoResponse
	pattern := "/blog/v1/photos"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/blog.v1.PhotoService/ListPhoto"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PhotoServiceHTTPClientImpl) UpdatePhoto(ctx context.Context, in *UpdatePhotoRequest, opts ...http.CallOption) (*Photo, error) {
	var out Photo
	pattern := "/blog/v1/photos/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/blog.v1.PhotoService/UpdatePhoto"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Photo, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
