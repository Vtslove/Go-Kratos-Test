// Code generated by ent, DO NOT EDIT.

package ent

import (
	"kratos-blog/app/content/service/internal/data/ent/category"
	"kratos-blog/app/content/service/internal/data/ent/link"
	"kratos-blog/app/content/service/internal/data/ent/menu"
	"kratos-blog/app/content/service/internal/data/ent/photo"
	"kratos-blog/app/content/service/internal/data/ent/post"
	"kratos-blog/app/content/service/internal/data/ent/tag"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 6)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   category.Table,
			Columns: category.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: category.FieldID,
			},
		},
		Type: "Category",
		Fields: map[string]*sqlgraph.FieldSpec{
			category.FieldCreateTime:  {Type: field.TypeInt64, Column: category.FieldCreateTime},
			category.FieldUpdateTime:  {Type: field.TypeInt64, Column: category.FieldUpdateTime},
			category.FieldDeleteTime:  {Type: field.TypeInt64, Column: category.FieldDeleteTime},
			category.FieldName:        {Type: field.TypeString, Column: category.FieldName},
			category.FieldSlug:        {Type: field.TypeString, Column: category.FieldSlug},
			category.FieldDescription: {Type: field.TypeString, Column: category.FieldDescription},
			category.FieldThumbnail:   {Type: field.TypeString, Column: category.FieldThumbnail},
			category.FieldPassword:    {Type: field.TypeString, Column: category.FieldPassword},
			category.FieldFullPath:    {Type: field.TypeString, Column: category.FieldFullPath},
			category.FieldParentID:    {Type: field.TypeUint32, Column: category.FieldParentID},
			category.FieldPriority:    {Type: field.TypeInt32, Column: category.FieldPriority},
			category.FieldPostCount:   {Type: field.TypeUint32, Column: category.FieldPostCount},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   link.Table,
			Columns: link.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: link.FieldID,
			},
		},
		Type: "Link",
		Fields: map[string]*sqlgraph.FieldSpec{
			link.FieldCreateTime:  {Type: field.TypeInt64, Column: link.FieldCreateTime},
			link.FieldUpdateTime:  {Type: field.TypeInt64, Column: link.FieldUpdateTime},
			link.FieldDeleteTime:  {Type: field.TypeInt64, Column: link.FieldDeleteTime},
			link.FieldName:        {Type: field.TypeString, Column: link.FieldName},
			link.FieldURL:         {Type: field.TypeString, Column: link.FieldURL},
			link.FieldLogo:        {Type: field.TypeString, Column: link.FieldLogo},
			link.FieldDescription: {Type: field.TypeString, Column: link.FieldDescription},
			link.FieldTeam:        {Type: field.TypeString, Column: link.FieldTeam},
			link.FieldPriority:    {Type: field.TypeInt32, Column: link.FieldPriority},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   menu.Table,
			Columns: menu.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: menu.FieldID,
			},
		},
		Type: "Menu",
		Fields: map[string]*sqlgraph.FieldSpec{
			menu.FieldCreateTime: {Type: field.TypeInt64, Column: menu.FieldCreateTime},
			menu.FieldUpdateTime: {Type: field.TypeInt64, Column: menu.FieldUpdateTime},
			menu.FieldDeleteTime: {Type: field.TypeInt64, Column: menu.FieldDeleteTime},
			menu.FieldName:       {Type: field.TypeString, Column: menu.FieldName},
			menu.FieldURL:        {Type: field.TypeString, Column: menu.FieldURL},
			menu.FieldPriority:   {Type: field.TypeInt32, Column: menu.FieldPriority},
			menu.FieldTarget:     {Type: field.TypeString, Column: menu.FieldTarget},
			menu.FieldIcon:       {Type: field.TypeString, Column: menu.FieldIcon},
			menu.FieldParentID:   {Type: field.TypeUint32, Column: menu.FieldParentID},
			menu.FieldTeam:       {Type: field.TypeString, Column: menu.FieldTeam},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   photo.Table,
			Columns: photo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: photo.FieldID,
			},
		},
		Type: "Photo",
		Fields: map[string]*sqlgraph.FieldSpec{
			photo.FieldCreateTime:  {Type: field.TypeInt64, Column: photo.FieldCreateTime},
			photo.FieldUpdateTime:  {Type: field.TypeInt64, Column: photo.FieldUpdateTime},
			photo.FieldDeleteTime:  {Type: field.TypeInt64, Column: photo.FieldDeleteTime},
			photo.FieldName:        {Type: field.TypeString, Column: photo.FieldName},
			photo.FieldThumbnail:   {Type: field.TypeString, Column: photo.FieldThumbnail},
			photo.FieldTakeTime:    {Type: field.TypeInt64, Column: photo.FieldTakeTime},
			photo.FieldURL:         {Type: field.TypeString, Column: photo.FieldURL},
			photo.FieldTeam:        {Type: field.TypeString, Column: photo.FieldTeam},
			photo.FieldLocation:    {Type: field.TypeString, Column: photo.FieldLocation},
			photo.FieldDescription: {Type: field.TypeString, Column: photo.FieldDescription},
			photo.FieldLikes:       {Type: field.TypeInt32, Column: photo.FieldLikes},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   post.Table,
			Columns: post.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: post.FieldID,
			},
		},
		Type: "Post",
		Fields: map[string]*sqlgraph.FieldSpec{
			post.FieldCreateTime:      {Type: field.TypeInt64, Column: post.FieldCreateTime},
			post.FieldUpdateTime:      {Type: field.TypeInt64, Column: post.FieldUpdateTime},
			post.FieldDeleteTime:      {Type: field.TypeInt64, Column: post.FieldDeleteTime},
			post.FieldTitle:           {Type: field.TypeString, Column: post.FieldTitle},
			post.FieldSlug:            {Type: field.TypeString, Column: post.FieldSlug},
			post.FieldMetaKeywords:    {Type: field.TypeString, Column: post.FieldMetaKeywords},
			post.FieldMetaDescription: {Type: field.TypeString, Column: post.FieldMetaDescription},
			post.FieldFullPath:        {Type: field.TypeString, Column: post.FieldFullPath},
			post.FieldOriginalContent: {Type: field.TypeString, Column: post.FieldOriginalContent},
			post.FieldContent:         {Type: field.TypeString, Column: post.FieldContent},
			post.FieldSummary:         {Type: field.TypeString, Column: post.FieldSummary},
			post.FieldThumbnail:       {Type: field.TypeString, Column: post.FieldThumbnail},
			post.FieldPassword:        {Type: field.TypeString, Column: post.FieldPassword},
			post.FieldTemplate:        {Type: field.TypeString, Column: post.FieldTemplate},
			post.FieldCommentCount:    {Type: field.TypeInt32, Column: post.FieldCommentCount},
			post.FieldVisits:          {Type: field.TypeInt32, Column: post.FieldVisits},
			post.FieldLikes:           {Type: field.TypeInt32, Column: post.FieldLikes},
			post.FieldWordCount:       {Type: field.TypeInt32, Column: post.FieldWordCount},
			post.FieldTopPriority:     {Type: field.TypeInt32, Column: post.FieldTopPriority},
			post.FieldStatus:          {Type: field.TypeInt32, Column: post.FieldStatus},
			post.FieldEditorType:      {Type: field.TypeInt32, Column: post.FieldEditorType},
			post.FieldEditTime:        {Type: field.TypeInt64, Column: post.FieldEditTime},
			post.FieldDisallowComment: {Type: field.TypeBool, Column: post.FieldDisallowComment},
			post.FieldInProgress:      {Type: field.TypeBool, Column: post.FieldInProgress},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   tag.Table,
			Columns: tag.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: tag.FieldID,
			},
		},
		Type: "Tag",
		Fields: map[string]*sqlgraph.FieldSpec{
			tag.FieldCreateTime: {Type: field.TypeInt64, Column: tag.FieldCreateTime},
			tag.FieldUpdateTime: {Type: field.TypeInt64, Column: tag.FieldUpdateTime},
			tag.FieldDeleteTime: {Type: field.TypeInt64, Column: tag.FieldDeleteTime},
			tag.FieldName:       {Type: field.TypeString, Column: tag.FieldName},
			tag.FieldSlug:       {Type: field.TypeString, Column: tag.FieldSlug},
			tag.FieldColor:      {Type: field.TypeString, Column: tag.FieldColor},
			tag.FieldThumbnail:  {Type: field.TypeString, Column: tag.FieldThumbnail},
			tag.FieldSlugName:   {Type: field.TypeString, Column: tag.FieldSlugName},
			tag.FieldPostCount:  {Type: field.TypeUint32, Column: tag.FieldPostCount},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (cq *CategoryQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CategoryQuery builder.
func (cq *CategoryQuery) Filter() *CategoryFilter {
	return &CategoryFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *CategoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CategoryMutation builder.
func (m *CategoryMutation) Filter() *CategoryFilter {
	return &CategoryFilter{config: m.config, predicateAdder: m}
}

// CategoryFilter provides a generic filtering capability at runtime for CategoryQuery.
type CategoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CategoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *CategoryFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(category.FieldID))
}

// WhereCreateTime applies the entql int64 predicate on the create_time field.
func (f *CategoryFilter) WhereCreateTime(p entql.Int64P) {
	f.Where(p.Field(category.FieldCreateTime))
}

// WhereUpdateTime applies the entql int64 predicate on the update_time field.
func (f *CategoryFilter) WhereUpdateTime(p entql.Int64P) {
	f.Where(p.Field(category.FieldUpdateTime))
}

// WhereDeleteTime applies the entql int64 predicate on the delete_time field.
func (f *CategoryFilter) WhereDeleteTime(p entql.Int64P) {
	f.Where(p.Field(category.FieldDeleteTime))
}

// WhereName applies the entql string predicate on the name field.
func (f *CategoryFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(category.FieldName))
}

// WhereSlug applies the entql string predicate on the slug field.
func (f *CategoryFilter) WhereSlug(p entql.StringP) {
	f.Where(p.Field(category.FieldSlug))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *CategoryFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(category.FieldDescription))
}

// WhereThumbnail applies the entql string predicate on the thumbnail field.
func (f *CategoryFilter) WhereThumbnail(p entql.StringP) {
	f.Where(p.Field(category.FieldThumbnail))
}

// WherePassword applies the entql string predicate on the password field.
func (f *CategoryFilter) WherePassword(p entql.StringP) {
	f.Where(p.Field(category.FieldPassword))
}

// WhereFullPath applies the entql string predicate on the full_path field.
func (f *CategoryFilter) WhereFullPath(p entql.StringP) {
	f.Where(p.Field(category.FieldFullPath))
}

// WhereParentID applies the entql uint32 predicate on the parent_id field.
func (f *CategoryFilter) WhereParentID(p entql.Uint32P) {
	f.Where(p.Field(category.FieldParentID))
}

// WherePriority applies the entql int32 predicate on the priority field.
func (f *CategoryFilter) WherePriority(p entql.Int32P) {
	f.Where(p.Field(category.FieldPriority))
}

// WherePostCount applies the entql uint32 predicate on the post_count field.
func (f *CategoryFilter) WherePostCount(p entql.Uint32P) {
	f.Where(p.Field(category.FieldPostCount))
}

// addPredicate implements the predicateAdder interface.
func (lq *LinkQuery) addPredicate(pred func(s *sql.Selector)) {
	lq.predicates = append(lq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the LinkQuery builder.
func (lq *LinkQuery) Filter() *LinkFilter {
	return &LinkFilter{config: lq.config, predicateAdder: lq}
}

// addPredicate implements the predicateAdder interface.
func (m *LinkMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the LinkMutation builder.
func (m *LinkMutation) Filter() *LinkFilter {
	return &LinkFilter{config: m.config, predicateAdder: m}
}

// LinkFilter provides a generic filtering capability at runtime for LinkQuery.
type LinkFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *LinkFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *LinkFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(link.FieldID))
}

// WhereCreateTime applies the entql int64 predicate on the create_time field.
func (f *LinkFilter) WhereCreateTime(p entql.Int64P) {
	f.Where(p.Field(link.FieldCreateTime))
}

// WhereUpdateTime applies the entql int64 predicate on the update_time field.
func (f *LinkFilter) WhereUpdateTime(p entql.Int64P) {
	f.Where(p.Field(link.FieldUpdateTime))
}

// WhereDeleteTime applies the entql int64 predicate on the delete_time field.
func (f *LinkFilter) WhereDeleteTime(p entql.Int64P) {
	f.Where(p.Field(link.FieldDeleteTime))
}

// WhereName applies the entql string predicate on the name field.
func (f *LinkFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(link.FieldName))
}

// WhereURL applies the entql string predicate on the url field.
func (f *LinkFilter) WhereURL(p entql.StringP) {
	f.Where(p.Field(link.FieldURL))
}

// WhereLogo applies the entql string predicate on the logo field.
func (f *LinkFilter) WhereLogo(p entql.StringP) {
	f.Where(p.Field(link.FieldLogo))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *LinkFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(link.FieldDescription))
}

// WhereTeam applies the entql string predicate on the team field.
func (f *LinkFilter) WhereTeam(p entql.StringP) {
	f.Where(p.Field(link.FieldTeam))
}

// WherePriority applies the entql int32 predicate on the priority field.
func (f *LinkFilter) WherePriority(p entql.Int32P) {
	f.Where(p.Field(link.FieldPriority))
}

// addPredicate implements the predicateAdder interface.
func (mq *MenuQuery) addPredicate(pred func(s *sql.Selector)) {
	mq.predicates = append(mq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the MenuQuery builder.
func (mq *MenuQuery) Filter() *MenuFilter {
	return &MenuFilter{config: mq.config, predicateAdder: mq}
}

// addPredicate implements the predicateAdder interface.
func (m *MenuMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the MenuMutation builder.
func (m *MenuMutation) Filter() *MenuFilter {
	return &MenuFilter{config: m.config, predicateAdder: m}
}

// MenuFilter provides a generic filtering capability at runtime for MenuQuery.
type MenuFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *MenuFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *MenuFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(menu.FieldID))
}

// WhereCreateTime applies the entql int64 predicate on the create_time field.
func (f *MenuFilter) WhereCreateTime(p entql.Int64P) {
	f.Where(p.Field(menu.FieldCreateTime))
}

// WhereUpdateTime applies the entql int64 predicate on the update_time field.
func (f *MenuFilter) WhereUpdateTime(p entql.Int64P) {
	f.Where(p.Field(menu.FieldUpdateTime))
}

// WhereDeleteTime applies the entql int64 predicate on the delete_time field.
func (f *MenuFilter) WhereDeleteTime(p entql.Int64P) {
	f.Where(p.Field(menu.FieldDeleteTime))
}

// WhereName applies the entql string predicate on the name field.
func (f *MenuFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(menu.FieldName))
}

// WhereURL applies the entql string predicate on the url field.
func (f *MenuFilter) WhereURL(p entql.StringP) {
	f.Where(p.Field(menu.FieldURL))
}

// WherePriority applies the entql int32 predicate on the priority field.
func (f *MenuFilter) WherePriority(p entql.Int32P) {
	f.Where(p.Field(menu.FieldPriority))
}

// WhereTarget applies the entql string predicate on the target field.
func (f *MenuFilter) WhereTarget(p entql.StringP) {
	f.Where(p.Field(menu.FieldTarget))
}

// WhereIcon applies the entql string predicate on the icon field.
func (f *MenuFilter) WhereIcon(p entql.StringP) {
	f.Where(p.Field(menu.FieldIcon))
}

// WhereParentID applies the entql uint32 predicate on the parent_id field.
func (f *MenuFilter) WhereParentID(p entql.Uint32P) {
	f.Where(p.Field(menu.FieldParentID))
}

// WhereTeam applies the entql string predicate on the team field.
func (f *MenuFilter) WhereTeam(p entql.StringP) {
	f.Where(p.Field(menu.FieldTeam))
}

// addPredicate implements the predicateAdder interface.
func (pq *PhotoQuery) addPredicate(pred func(s *sql.Selector)) {
	pq.predicates = append(pq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PhotoQuery builder.
func (pq *PhotoQuery) Filter() *PhotoFilter {
	return &PhotoFilter{config: pq.config, predicateAdder: pq}
}

// addPredicate implements the predicateAdder interface.
func (m *PhotoMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PhotoMutation builder.
func (m *PhotoMutation) Filter() *PhotoFilter {
	return &PhotoFilter{config: m.config, predicateAdder: m}
}

// PhotoFilter provides a generic filtering capability at runtime for PhotoQuery.
type PhotoFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PhotoFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *PhotoFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(photo.FieldID))
}

// WhereCreateTime applies the entql int64 predicate on the create_time field.
func (f *PhotoFilter) WhereCreateTime(p entql.Int64P) {
	f.Where(p.Field(photo.FieldCreateTime))
}

// WhereUpdateTime applies the entql int64 predicate on the update_time field.
func (f *PhotoFilter) WhereUpdateTime(p entql.Int64P) {
	f.Where(p.Field(photo.FieldUpdateTime))
}

// WhereDeleteTime applies the entql int64 predicate on the delete_time field.
func (f *PhotoFilter) WhereDeleteTime(p entql.Int64P) {
	f.Where(p.Field(photo.FieldDeleteTime))
}

// WhereName applies the entql string predicate on the name field.
func (f *PhotoFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(photo.FieldName))
}

// WhereThumbnail applies the entql string predicate on the thumbnail field.
func (f *PhotoFilter) WhereThumbnail(p entql.StringP) {
	f.Where(p.Field(photo.FieldThumbnail))
}

// WhereTakeTime applies the entql int64 predicate on the take_time field.
func (f *PhotoFilter) WhereTakeTime(p entql.Int64P) {
	f.Where(p.Field(photo.FieldTakeTime))
}

// WhereURL applies the entql string predicate on the url field.
func (f *PhotoFilter) WhereURL(p entql.StringP) {
	f.Where(p.Field(photo.FieldURL))
}

// WhereTeam applies the entql string predicate on the team field.
func (f *PhotoFilter) WhereTeam(p entql.StringP) {
	f.Where(p.Field(photo.FieldTeam))
}

// WhereLocation applies the entql string predicate on the location field.
func (f *PhotoFilter) WhereLocation(p entql.StringP) {
	f.Where(p.Field(photo.FieldLocation))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *PhotoFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(photo.FieldDescription))
}

// WhereLikes applies the entql int32 predicate on the likes field.
func (f *PhotoFilter) WhereLikes(p entql.Int32P) {
	f.Where(p.Field(photo.FieldLikes))
}

// addPredicate implements the predicateAdder interface.
func (pq *PostQuery) addPredicate(pred func(s *sql.Selector)) {
	pq.predicates = append(pq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PostQuery builder.
func (pq *PostQuery) Filter() *PostFilter {
	return &PostFilter{config: pq.config, predicateAdder: pq}
}

// addPredicate implements the predicateAdder interface.
func (m *PostMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PostMutation builder.
func (m *PostMutation) Filter() *PostFilter {
	return &PostFilter{config: m.config, predicateAdder: m}
}

// PostFilter provides a generic filtering capability at runtime for PostQuery.
type PostFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PostFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *PostFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(post.FieldID))
}

// WhereCreateTime applies the entql int64 predicate on the create_time field.
func (f *PostFilter) WhereCreateTime(p entql.Int64P) {
	f.Where(p.Field(post.FieldCreateTime))
}

// WhereUpdateTime applies the entql int64 predicate on the update_time field.
func (f *PostFilter) WhereUpdateTime(p entql.Int64P) {
	f.Where(p.Field(post.FieldUpdateTime))
}

// WhereDeleteTime applies the entql int64 predicate on the delete_time field.
func (f *PostFilter) WhereDeleteTime(p entql.Int64P) {
	f.Where(p.Field(post.FieldDeleteTime))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *PostFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(post.FieldTitle))
}

// WhereSlug applies the entql string predicate on the slug field.
func (f *PostFilter) WhereSlug(p entql.StringP) {
	f.Where(p.Field(post.FieldSlug))
}

// WhereMetaKeywords applies the entql string predicate on the meta_keywords field.
func (f *PostFilter) WhereMetaKeywords(p entql.StringP) {
	f.Where(p.Field(post.FieldMetaKeywords))
}

// WhereMetaDescription applies the entql string predicate on the meta_description field.
func (f *PostFilter) WhereMetaDescription(p entql.StringP) {
	f.Where(p.Field(post.FieldMetaDescription))
}

// WhereFullPath applies the entql string predicate on the full_path field.
func (f *PostFilter) WhereFullPath(p entql.StringP) {
	f.Where(p.Field(post.FieldFullPath))
}

// WhereOriginalContent applies the entql string predicate on the original_content field.
func (f *PostFilter) WhereOriginalContent(p entql.StringP) {
	f.Where(p.Field(post.FieldOriginalContent))
}

// WhereContent applies the entql string predicate on the content field.
func (f *PostFilter) WhereContent(p entql.StringP) {
	f.Where(p.Field(post.FieldContent))
}

// WhereSummary applies the entql string predicate on the summary field.
func (f *PostFilter) WhereSummary(p entql.StringP) {
	f.Where(p.Field(post.FieldSummary))
}

// WhereThumbnail applies the entql string predicate on the thumbnail field.
func (f *PostFilter) WhereThumbnail(p entql.StringP) {
	f.Where(p.Field(post.FieldThumbnail))
}

// WherePassword applies the entql string predicate on the password field.
func (f *PostFilter) WherePassword(p entql.StringP) {
	f.Where(p.Field(post.FieldPassword))
}

// WhereTemplate applies the entql string predicate on the template field.
func (f *PostFilter) WhereTemplate(p entql.StringP) {
	f.Where(p.Field(post.FieldTemplate))
}

// WhereCommentCount applies the entql int32 predicate on the comment_count field.
func (f *PostFilter) WhereCommentCount(p entql.Int32P) {
	f.Where(p.Field(post.FieldCommentCount))
}

// WhereVisits applies the entql int32 predicate on the visits field.
func (f *PostFilter) WhereVisits(p entql.Int32P) {
	f.Where(p.Field(post.FieldVisits))
}

// WhereLikes applies the entql int32 predicate on the likes field.
func (f *PostFilter) WhereLikes(p entql.Int32P) {
	f.Where(p.Field(post.FieldLikes))
}

// WhereWordCount applies the entql int32 predicate on the word_count field.
func (f *PostFilter) WhereWordCount(p entql.Int32P) {
	f.Where(p.Field(post.FieldWordCount))
}

// WhereTopPriority applies the entql int32 predicate on the top_priority field.
func (f *PostFilter) WhereTopPriority(p entql.Int32P) {
	f.Where(p.Field(post.FieldTopPriority))
}

// WhereStatus applies the entql int32 predicate on the status field.
func (f *PostFilter) WhereStatus(p entql.Int32P) {
	f.Where(p.Field(post.FieldStatus))
}

// WhereEditorType applies the entql int32 predicate on the editor_type field.
func (f *PostFilter) WhereEditorType(p entql.Int32P) {
	f.Where(p.Field(post.FieldEditorType))
}

// WhereEditTime applies the entql int64 predicate on the edit_time field.
func (f *PostFilter) WhereEditTime(p entql.Int64P) {
	f.Where(p.Field(post.FieldEditTime))
}

// WhereDisallowComment applies the entql bool predicate on the disallow_comment field.
func (f *PostFilter) WhereDisallowComment(p entql.BoolP) {
	f.Where(p.Field(post.FieldDisallowComment))
}

// WhereInProgress applies the entql bool predicate on the in_progress field.
func (f *PostFilter) WhereInProgress(p entql.BoolP) {
	f.Where(p.Field(post.FieldInProgress))
}

// addPredicate implements the predicateAdder interface.
func (tq *TagQuery) addPredicate(pred func(s *sql.Selector)) {
	tq.predicates = append(tq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TagQuery builder.
func (tq *TagQuery) Filter() *TagFilter {
	return &TagFilter{config: tq.config, predicateAdder: tq}
}

// addPredicate implements the predicateAdder interface.
func (m *TagMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TagMutation builder.
func (m *TagMutation) Filter() *TagFilter {
	return &TagFilter{config: m.config, predicateAdder: m}
}

// TagFilter provides a generic filtering capability at runtime for TagQuery.
type TagFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TagFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *TagFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(tag.FieldID))
}

// WhereCreateTime applies the entql int64 predicate on the create_time field.
func (f *TagFilter) WhereCreateTime(p entql.Int64P) {
	f.Where(p.Field(tag.FieldCreateTime))
}

// WhereUpdateTime applies the entql int64 predicate on the update_time field.
func (f *TagFilter) WhereUpdateTime(p entql.Int64P) {
	f.Where(p.Field(tag.FieldUpdateTime))
}

// WhereDeleteTime applies the entql int64 predicate on the delete_time field.
func (f *TagFilter) WhereDeleteTime(p entql.Int64P) {
	f.Where(p.Field(tag.FieldDeleteTime))
}

// WhereName applies the entql string predicate on the name field.
func (f *TagFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(tag.FieldName))
}

// WhereSlug applies the entql string predicate on the slug field.
func (f *TagFilter) WhereSlug(p entql.StringP) {
	f.Where(p.Field(tag.FieldSlug))
}

// WhereColor applies the entql string predicate on the color field.
func (f *TagFilter) WhereColor(p entql.StringP) {
	f.Where(p.Field(tag.FieldColor))
}

// WhereThumbnail applies the entql string predicate on the thumbnail field.
func (f *TagFilter) WhereThumbnail(p entql.StringP) {
	f.Where(p.Field(tag.FieldThumbnail))
}

// WhereSlugName applies the entql string predicate on the slug_name field.
func (f *TagFilter) WhereSlugName(p entql.StringP) {
	f.Where(p.Field(tag.FieldSlugName))
}

// WherePostCount applies the entql uint32 predicate on the post_count field.
func (f *TagFilter) WherePostCount(p entql.Uint32P) {
	f.Where(p.Field(tag.FieldPostCount))
}
