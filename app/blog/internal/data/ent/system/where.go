// Code generated by ent, DO NOT EDIT.

package system

import (
	"kratos-blog/app/blog/internal/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v int64) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v int64) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// Keywords applies equality check predicate on the "keywords" field. It's identical to KeywordsEQ.
func Keywords(v string) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKeywords), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// RecordNumber applies equality check predicate on the "record_number" field. It's identical to RecordNumberEQ.
func RecordNumber(v string) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRecordNumber), v))
	})
}

// Theme applies equality check predicate on the "Theme" field. It's identical to ThemeEQ.
func Theme(v int32) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTheme), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v int64) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v int64) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...int64) predicate.System {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...int64) predicate.System {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v int64) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v int64) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v int64) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v int64) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIsNil applies the IsNil predicate on the "create_time" field.
func CreateTimeIsNil() predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreateTime)))
	})
}

// CreateTimeNotNil applies the NotNil predicate on the "create_time" field.
func CreateTimeNotNil() predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreateTime)))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v int64) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v int64) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...int64) predicate.System {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...int64) predicate.System {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v int64) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v int64) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v int64) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v int64) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIsNil applies the IsNil predicate on the "update_time" field.
func UpdateTimeIsNil() predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdateTime)))
	})
}

// UpdateTimeNotNil applies the NotNil predicate on the "update_time" field.
func UpdateTimeNotNil() predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdateTime)))
	})
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTitle), v))
	})
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.System {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTitle), v...))
	})
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.System {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTitle), v...))
	})
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTitle), v))
	})
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTitle), v))
	})
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTitle), v))
	})
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTitle), v))
	})
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTitle), v))
	})
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTitle), v))
	})
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTitle), v))
	})
}

// TitleIsNil applies the IsNil predicate on the "title" field.
func TitleIsNil() predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTitle)))
	})
}

// TitleNotNil applies the NotNil predicate on the "title" field.
func TitleNotNil() predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTitle)))
	})
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTitle), v))
	})
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTitle), v))
	})
}

// KeywordsEQ applies the EQ predicate on the "keywords" field.
func KeywordsEQ(v string) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKeywords), v))
	})
}

// KeywordsNEQ applies the NEQ predicate on the "keywords" field.
func KeywordsNEQ(v string) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldKeywords), v))
	})
}

// KeywordsIn applies the In predicate on the "keywords" field.
func KeywordsIn(vs ...string) predicate.System {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldKeywords), v...))
	})
}

// KeywordsNotIn applies the NotIn predicate on the "keywords" field.
func KeywordsNotIn(vs ...string) predicate.System {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldKeywords), v...))
	})
}

// KeywordsGT applies the GT predicate on the "keywords" field.
func KeywordsGT(v string) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldKeywords), v))
	})
}

// KeywordsGTE applies the GTE predicate on the "keywords" field.
func KeywordsGTE(v string) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldKeywords), v))
	})
}

// KeywordsLT applies the LT predicate on the "keywords" field.
func KeywordsLT(v string) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldKeywords), v))
	})
}

// KeywordsLTE applies the LTE predicate on the "keywords" field.
func KeywordsLTE(v string) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldKeywords), v))
	})
}

// KeywordsContains applies the Contains predicate on the "keywords" field.
func KeywordsContains(v string) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldKeywords), v))
	})
}

// KeywordsHasPrefix applies the HasPrefix predicate on the "keywords" field.
func KeywordsHasPrefix(v string) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldKeywords), v))
	})
}

// KeywordsHasSuffix applies the HasSuffix predicate on the "keywords" field.
func KeywordsHasSuffix(v string) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldKeywords), v))
	})
}

// KeywordsIsNil applies the IsNil predicate on the "keywords" field.
func KeywordsIsNil() predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldKeywords)))
	})
}

// KeywordsNotNil applies the NotNil predicate on the "keywords" field.
func KeywordsNotNil() predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldKeywords)))
	})
}

// KeywordsEqualFold applies the EqualFold predicate on the "keywords" field.
func KeywordsEqualFold(v string) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldKeywords), v))
	})
}

// KeywordsContainsFold applies the ContainsFold predicate on the "keywords" field.
func KeywordsContainsFold(v string) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldKeywords), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.System {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.System {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDescription)))
	})
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDescription)))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// RecordNumberEQ applies the EQ predicate on the "record_number" field.
func RecordNumberEQ(v string) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRecordNumber), v))
	})
}

// RecordNumberNEQ applies the NEQ predicate on the "record_number" field.
func RecordNumberNEQ(v string) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRecordNumber), v))
	})
}

// RecordNumberIn applies the In predicate on the "record_number" field.
func RecordNumberIn(vs ...string) predicate.System {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRecordNumber), v...))
	})
}

// RecordNumberNotIn applies the NotIn predicate on the "record_number" field.
func RecordNumberNotIn(vs ...string) predicate.System {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRecordNumber), v...))
	})
}

// RecordNumberGT applies the GT predicate on the "record_number" field.
func RecordNumberGT(v string) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRecordNumber), v))
	})
}

// RecordNumberGTE applies the GTE predicate on the "record_number" field.
func RecordNumberGTE(v string) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRecordNumber), v))
	})
}

// RecordNumberLT applies the LT predicate on the "record_number" field.
func RecordNumberLT(v string) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRecordNumber), v))
	})
}

// RecordNumberLTE applies the LTE predicate on the "record_number" field.
func RecordNumberLTE(v string) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRecordNumber), v))
	})
}

// RecordNumberContains applies the Contains predicate on the "record_number" field.
func RecordNumberContains(v string) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRecordNumber), v))
	})
}

// RecordNumberHasPrefix applies the HasPrefix predicate on the "record_number" field.
func RecordNumberHasPrefix(v string) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRecordNumber), v))
	})
}

// RecordNumberHasSuffix applies the HasSuffix predicate on the "record_number" field.
func RecordNumberHasSuffix(v string) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRecordNumber), v))
	})
}

// RecordNumberIsNil applies the IsNil predicate on the "record_number" field.
func RecordNumberIsNil() predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRecordNumber)))
	})
}

// RecordNumberNotNil applies the NotNil predicate on the "record_number" field.
func RecordNumberNotNil() predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRecordNumber)))
	})
}

// RecordNumberEqualFold applies the EqualFold predicate on the "record_number" field.
func RecordNumberEqualFold(v string) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRecordNumber), v))
	})
}

// RecordNumberContainsFold applies the ContainsFold predicate on the "record_number" field.
func RecordNumberContainsFold(v string) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRecordNumber), v))
	})
}

// ThemeEQ applies the EQ predicate on the "Theme" field.
func ThemeEQ(v int32) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTheme), v))
	})
}

// ThemeNEQ applies the NEQ predicate on the "Theme" field.
func ThemeNEQ(v int32) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTheme), v))
	})
}

// ThemeIn applies the In predicate on the "Theme" field.
func ThemeIn(vs ...int32) predicate.System {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTheme), v...))
	})
}

// ThemeNotIn applies the NotIn predicate on the "Theme" field.
func ThemeNotIn(vs ...int32) predicate.System {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTheme), v...))
	})
}

// ThemeGT applies the GT predicate on the "Theme" field.
func ThemeGT(v int32) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTheme), v))
	})
}

// ThemeGTE applies the GTE predicate on the "Theme" field.
func ThemeGTE(v int32) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTheme), v))
	})
}

// ThemeLT applies the LT predicate on the "Theme" field.
func ThemeLT(v int32) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTheme), v))
	})
}

// ThemeLTE applies the LTE predicate on the "Theme" field.
func ThemeLTE(v int32) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTheme), v))
	})
}

// ThemeIsNil applies the IsNil predicate on the "Theme" field.
func ThemeIsNil() predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTheme)))
	})
}

// ThemeNotNil applies the NotNil predicate on the "Theme" field.
func ThemeNotNil() predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTheme)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.System) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.System) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.System) predicate.System {
	return predicate.System(func(s *sql.Selector) {
		p(s.Not())
	})
}
