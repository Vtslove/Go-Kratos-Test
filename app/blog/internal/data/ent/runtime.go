// Code generated by ent, DO NOT EDIT.

package ent

import (
	"kratos-blog/app/blog/internal/data/ent/category"
	"kratos-blog/app/blog/internal/data/ent/link"
	"kratos-blog/app/blog/internal/data/ent/post"
	"kratos-blog/app/blog/internal/data/ent/schema"
	"kratos-blog/app/blog/internal/data/ent/system"
	"kratos-blog/app/blog/internal/data/ent/tag"
	"kratos-blog/app/blog/internal/data/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	categoryMixin := schema.Category{}.Mixin()
	categoryMixinFields0 := categoryMixin[0].Fields()
	_ = categoryMixinFields0
	categoryMixinFields1 := categoryMixin[1].Fields()
	_ = categoryMixinFields1
	categoryFields := schema.Category{}.Fields()
	_ = categoryFields
	// categoryDescUpdateTime is the schema descriptor for update_time field.
	categoryDescUpdateTime := categoryMixinFields1[1].Descriptor()
	// category.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	category.UpdateDefaultUpdateTime = categoryDescUpdateTime.UpdateDefault.(func() int64)
	// categoryDescName is the schema descriptor for name field.
	categoryDescName := categoryFields[0].Descriptor()
	// category.NameValidator is a validator for the "name" field. It is called by the builders before save.
	category.NameValidator = categoryDescName.Validators[0].(func(string) error)
	// categoryDescID is the schema descriptor for id field.
	categoryDescID := categoryMixinFields0[0].Descriptor()
	// category.IDValidator is a validator for the "id" field. It is called by the builders before save.
	category.IDValidator = categoryDescID.Validators[0].(func(uint64) error)
	linkMixin := schema.Link{}.Mixin()
	linkMixinFields0 := linkMixin[0].Fields()
	_ = linkMixinFields0
	linkMixinFields1 := linkMixin[1].Fields()
	_ = linkMixinFields1
	linkFields := schema.Link{}.Fields()
	_ = linkFields
	// linkDescUpdateTime is the schema descriptor for update_time field.
	linkDescUpdateTime := linkMixinFields1[1].Descriptor()
	// link.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	link.UpdateDefaultUpdateTime = linkDescUpdateTime.UpdateDefault.(func() int64)
	// linkDescName is the schema descriptor for name field.
	linkDescName := linkFields[0].Descriptor()
	// link.NameValidator is a validator for the "name" field. It is called by the builders before save.
	link.NameValidator = linkDescName.Validators[0].(func(string) error)
	// linkDescID is the schema descriptor for id field.
	linkDescID := linkMixinFields0[0].Descriptor()
	// link.IDValidator is a validator for the "id" field. It is called by the builders before save.
	link.IDValidator = linkDescID.Validators[0].(func(uint64) error)
	postMixin := schema.Post{}.Mixin()
	postMixinFields0 := postMixin[0].Fields()
	_ = postMixinFields0
	postMixinFields1 := postMixin[1].Fields()
	_ = postMixinFields1
	postFields := schema.Post{}.Fields()
	_ = postFields
	// postDescUpdateTime is the schema descriptor for update_time field.
	postDescUpdateTime := postMixinFields1[1].Descriptor()
	// post.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	post.UpdateDefaultUpdateTime = postDescUpdateTime.UpdateDefault.(func() int64)
	// postDescTitle is the schema descriptor for title field.
	postDescTitle := postFields[0].Descriptor()
	// post.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	post.TitleValidator = postDescTitle.Validators[0].(func(string) error)
	// postDescID is the schema descriptor for id field.
	postDescID := postMixinFields0[0].Descriptor()
	// post.IDValidator is a validator for the "id" field. It is called by the builders before save.
	post.IDValidator = postDescID.Validators[0].(func(uint64) error)
	systemMixin := schema.System{}.Mixin()
	systemMixinFields0 := systemMixin[0].Fields()
	_ = systemMixinFields0
	systemMixinFields1 := systemMixin[1].Fields()
	_ = systemMixinFields1
	systemFields := schema.System{}.Fields()
	_ = systemFields
	// systemDescUpdateTime is the schema descriptor for update_time field.
	systemDescUpdateTime := systemMixinFields1[1].Descriptor()
	// system.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	system.UpdateDefaultUpdateTime = systemDescUpdateTime.UpdateDefault.(func() int64)
	// systemDescID is the schema descriptor for id field.
	systemDescID := systemMixinFields0[0].Descriptor()
	// system.IDValidator is a validator for the "id" field. It is called by the builders before save.
	system.IDValidator = systemDescID.Validators[0].(func(uint64) error)
	tagMixin := schema.Tag{}.Mixin()
	tagMixinFields0 := tagMixin[0].Fields()
	_ = tagMixinFields0
	tagMixinFields1 := tagMixin[1].Fields()
	_ = tagMixinFields1
	tagFields := schema.Tag{}.Fields()
	_ = tagFields
	// tagDescUpdateTime is the schema descriptor for update_time field.
	tagDescUpdateTime := tagMixinFields1[1].Descriptor()
	// tag.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	tag.UpdateDefaultUpdateTime = tagDescUpdateTime.UpdateDefault.(func() int64)
	// tagDescName is the schema descriptor for name field.
	tagDescName := tagFields[0].Descriptor()
	// tag.NameValidator is a validator for the "name" field. It is called by the builders before save.
	tag.NameValidator = tagDescName.Validators[0].(func(string) error)
	// tagDescID is the schema descriptor for id field.
	tagDescID := tagMixinFields0[0].Descriptor()
	// tag.IDValidator is a validator for the "id" field. It is called by the builders before save.
	tag.IDValidator = tagDescID.Validators[0].(func(uint64) error)
	userMixin := schema.User{}.Mixin()
	userMixinFields0 := userMixin[0].Fields()
	_ = userMixinFields0
	userMixinFields1 := userMixin[1].Fields()
	_ = userMixinFields1
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescUpdateTime is the schema descriptor for update_time field.
	userDescUpdateTime := userMixinFields1[1].Descriptor()
	// user.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	user.UpdateDefaultUpdateTime = userDescUpdateTime.UpdateDefault.(func() int64)
	// userDescUsername is the schema descriptor for username field.
	userDescUsername := userFields[0].Descriptor()
	// user.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	user.UsernameValidator = func() func(string) error {
		validators := userDescUsername.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(username string) error {
			for _, fn := range fns {
				if err := fn(username); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescNickname is the schema descriptor for nickname field.
	userDescNickname := userFields[1].Descriptor()
	// user.NicknameValidator is a validator for the "nickname" field. It is called by the builders before save.
	user.NicknameValidator = userDescNickname.Validators[0].(func(string) error)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[2].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[3].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = func() func(string) error {
		validators := userDescPassword.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(password string) error {
			for _, fn := range fns {
				if err := fn(password); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescID is the schema descriptor for id field.
	userDescID := userMixinFields0[0].Descriptor()
	// user.IDValidator is a validator for the "id" field. It is called by the builders before save.
	user.IDValidator = userDescID.Validators[0].(func(uint64) error)
}
