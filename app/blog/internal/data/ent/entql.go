// Code generated by ent, DO NOT EDIT.

package ent

import (
	"kratos-blog/app/blog/internal/data/ent/category"
	"kratos-blog/app/blog/internal/data/ent/link"
	"kratos-blog/app/blog/internal/data/ent/post"
	"kratos-blog/app/blog/internal/data/ent/system"
	"kratos-blog/app/blog/internal/data/ent/tag"
	"kratos-blog/app/blog/internal/data/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 6)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   category.Table,
			Columns: category.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: category.FieldID,
			},
		},
		Type: "Category",
		Fields: map[string]*sqlgraph.FieldSpec{
			category.FieldCreateTime:  {Type: field.TypeInt64, Column: category.FieldCreateTime},
			category.FieldUpdateTime:  {Type: field.TypeInt64, Column: category.FieldUpdateTime},
			category.FieldName:        {Type: field.TypeString, Column: category.FieldName},
			category.FieldDisplayName: {Type: field.TypeString, Column: category.FieldDisplayName},
			category.FieldSeoDesc:     {Type: field.TypeString, Column: category.FieldSeoDesc},
			category.FieldParentID:    {Type: field.TypeUint64, Column: category.FieldParentID},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   link.Table,
			Columns: link.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: link.FieldID,
			},
		},
		Type: "Link",
		Fields: map[string]*sqlgraph.FieldSpec{
			link.FieldCreateTime: {Type: field.TypeInt64, Column: link.FieldCreateTime},
			link.FieldUpdateTime: {Type: field.TypeInt64, Column: link.FieldUpdateTime},
			link.FieldName:       {Type: field.TypeString, Column: link.FieldName},
			link.FieldLink:       {Type: field.TypeString, Column: link.FieldLink},
			link.FieldOrderID:    {Type: field.TypeInt32, Column: link.FieldOrderID},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   post.Table,
			Columns: post.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: post.FieldID,
			},
		},
		Type: "Post",
		Fields: map[string]*sqlgraph.FieldSpec{
			post.FieldCreateTime: {Type: field.TypeInt64, Column: post.FieldCreateTime},
			post.FieldUpdateTime: {Type: field.TypeInt64, Column: post.FieldUpdateTime},
			post.FieldTitle:      {Type: field.TypeString, Column: post.FieldTitle},
			post.FieldSummary:    {Type: field.TypeString, Column: post.FieldSummary},
			post.FieldOriginal:   {Type: field.TypeString, Column: post.FieldOriginal},
			post.FieldContent:    {Type: field.TypeString, Column: post.FieldContent},
			post.FieldPassword:   {Type: field.TypeString, Column: post.FieldPassword},
			post.FieldUserID:     {Type: field.TypeInt64, Column: post.FieldUserID},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   system.Table,
			Columns: system.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: system.FieldID,
			},
		},
		Type: "System",
		Fields: map[string]*sqlgraph.FieldSpec{
			system.FieldCreateTime:   {Type: field.TypeInt64, Column: system.FieldCreateTime},
			system.FieldUpdateTime:   {Type: field.TypeInt64, Column: system.FieldUpdateTime},
			system.FieldTitle:        {Type: field.TypeString, Column: system.FieldTitle},
			system.FieldKeywords:     {Type: field.TypeString, Column: system.FieldKeywords},
			system.FieldDescription:  {Type: field.TypeString, Column: system.FieldDescription},
			system.FieldRecordNumber: {Type: field.TypeString, Column: system.FieldRecordNumber},
			system.FieldTheme:        {Type: field.TypeInt32, Column: system.FieldTheme},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   tag.Table,
			Columns: tag.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: tag.FieldID,
			},
		},
		Type: "Tag",
		Fields: map[string]*sqlgraph.FieldSpec{
			tag.FieldCreateTime:  {Type: field.TypeInt64, Column: tag.FieldCreateTime},
			tag.FieldUpdateTime:  {Type: field.TypeInt64, Column: tag.FieldUpdateTime},
			tag.FieldName:        {Type: field.TypeString, Column: tag.FieldName},
			tag.FieldDisplayName: {Type: field.TypeString, Column: tag.FieldDisplayName},
			tag.FieldSeoDesc:     {Type: field.TypeString, Column: tag.FieldSeoDesc},
			tag.FieldUseCount:    {Type: field.TypeInt32, Column: tag.FieldUseCount},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: user.FieldID,
			},
		},
		Type: "User",
		Fields: map[string]*sqlgraph.FieldSpec{
			user.FieldCreateTime: {Type: field.TypeInt64, Column: user.FieldCreateTime},
			user.FieldUpdateTime: {Type: field.TypeInt64, Column: user.FieldUpdateTime},
			user.FieldUsername:   {Type: field.TypeString, Column: user.FieldUsername},
			user.FieldNickname:   {Type: field.TypeString, Column: user.FieldNickname},
			user.FieldEmail:      {Type: field.TypeString, Column: user.FieldEmail},
			user.FieldPassword:   {Type: field.TypeString, Column: user.FieldPassword},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (cq *CategoryQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CategoryQuery builder.
func (cq *CategoryQuery) Filter() *CategoryFilter {
	return &CategoryFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *CategoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CategoryMutation builder.
func (m *CategoryMutation) Filter() *CategoryFilter {
	return &CategoryFilter{config: m.config, predicateAdder: m}
}

// CategoryFilter provides a generic filtering capability at runtime for CategoryQuery.
type CategoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CategoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *CategoryFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(category.FieldID))
}

// WhereCreateTime applies the entql int64 predicate on the create_time field.
func (f *CategoryFilter) WhereCreateTime(p entql.Int64P) {
	f.Where(p.Field(category.FieldCreateTime))
}

// WhereUpdateTime applies the entql int64 predicate on the update_time field.
func (f *CategoryFilter) WhereUpdateTime(p entql.Int64P) {
	f.Where(p.Field(category.FieldUpdateTime))
}

// WhereName applies the entql string predicate on the name field.
func (f *CategoryFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(category.FieldName))
}

// WhereDisplayName applies the entql string predicate on the display_name field.
func (f *CategoryFilter) WhereDisplayName(p entql.StringP) {
	f.Where(p.Field(category.FieldDisplayName))
}

// WhereSeoDesc applies the entql string predicate on the seo_desc field.
func (f *CategoryFilter) WhereSeoDesc(p entql.StringP) {
	f.Where(p.Field(category.FieldSeoDesc))
}

// WhereParentID applies the entql uint64 predicate on the parent_id field.
func (f *CategoryFilter) WhereParentID(p entql.Uint64P) {
	f.Where(p.Field(category.FieldParentID))
}

// addPredicate implements the predicateAdder interface.
func (lq *LinkQuery) addPredicate(pred func(s *sql.Selector)) {
	lq.predicates = append(lq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the LinkQuery builder.
func (lq *LinkQuery) Filter() *LinkFilter {
	return &LinkFilter{config: lq.config, predicateAdder: lq}
}

// addPredicate implements the predicateAdder interface.
func (m *LinkMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the LinkMutation builder.
func (m *LinkMutation) Filter() *LinkFilter {
	return &LinkFilter{config: m.config, predicateAdder: m}
}

// LinkFilter provides a generic filtering capability at runtime for LinkQuery.
type LinkFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *LinkFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *LinkFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(link.FieldID))
}

// WhereCreateTime applies the entql int64 predicate on the create_time field.
func (f *LinkFilter) WhereCreateTime(p entql.Int64P) {
	f.Where(p.Field(link.FieldCreateTime))
}

// WhereUpdateTime applies the entql int64 predicate on the update_time field.
func (f *LinkFilter) WhereUpdateTime(p entql.Int64P) {
	f.Where(p.Field(link.FieldUpdateTime))
}

// WhereName applies the entql string predicate on the name field.
func (f *LinkFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(link.FieldName))
}

// WhereLink applies the entql string predicate on the link field.
func (f *LinkFilter) WhereLink(p entql.StringP) {
	f.Where(p.Field(link.FieldLink))
}

// WhereOrderID applies the entql int32 predicate on the order_id field.
func (f *LinkFilter) WhereOrderID(p entql.Int32P) {
	f.Where(p.Field(link.FieldOrderID))
}

// addPredicate implements the predicateAdder interface.
func (pq *PostQuery) addPredicate(pred func(s *sql.Selector)) {
	pq.predicates = append(pq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PostQuery builder.
func (pq *PostQuery) Filter() *PostFilter {
	return &PostFilter{config: pq.config, predicateAdder: pq}
}

// addPredicate implements the predicateAdder interface.
func (m *PostMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PostMutation builder.
func (m *PostMutation) Filter() *PostFilter {
	return &PostFilter{config: m.config, predicateAdder: m}
}

// PostFilter provides a generic filtering capability at runtime for PostQuery.
type PostFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PostFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *PostFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(post.FieldID))
}

// WhereCreateTime applies the entql int64 predicate on the create_time field.
func (f *PostFilter) WhereCreateTime(p entql.Int64P) {
	f.Where(p.Field(post.FieldCreateTime))
}

// WhereUpdateTime applies the entql int64 predicate on the update_time field.
func (f *PostFilter) WhereUpdateTime(p entql.Int64P) {
	f.Where(p.Field(post.FieldUpdateTime))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *PostFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(post.FieldTitle))
}

// WhereSummary applies the entql string predicate on the summary field.
func (f *PostFilter) WhereSummary(p entql.StringP) {
	f.Where(p.Field(post.FieldSummary))
}

// WhereOriginal applies the entql string predicate on the original field.
func (f *PostFilter) WhereOriginal(p entql.StringP) {
	f.Where(p.Field(post.FieldOriginal))
}

// WhereContent applies the entql string predicate on the content field.
func (f *PostFilter) WhereContent(p entql.StringP) {
	f.Where(p.Field(post.FieldContent))
}

// WherePassword applies the entql string predicate on the password field.
func (f *PostFilter) WherePassword(p entql.StringP) {
	f.Where(p.Field(post.FieldPassword))
}

// WhereUserID applies the entql int64 predicate on the user_id field.
func (f *PostFilter) WhereUserID(p entql.Int64P) {
	f.Where(p.Field(post.FieldUserID))
}

// addPredicate implements the predicateAdder interface.
func (sq *SystemQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SystemQuery builder.
func (sq *SystemQuery) Filter() *SystemFilter {
	return &SystemFilter{config: sq.config, predicateAdder: sq}
}

// addPredicate implements the predicateAdder interface.
func (m *SystemMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SystemMutation builder.
func (m *SystemMutation) Filter() *SystemFilter {
	return &SystemFilter{config: m.config, predicateAdder: m}
}

// SystemFilter provides a generic filtering capability at runtime for SystemQuery.
type SystemFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SystemFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *SystemFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(system.FieldID))
}

// WhereCreateTime applies the entql int64 predicate on the create_time field.
func (f *SystemFilter) WhereCreateTime(p entql.Int64P) {
	f.Where(p.Field(system.FieldCreateTime))
}

// WhereUpdateTime applies the entql int64 predicate on the update_time field.
func (f *SystemFilter) WhereUpdateTime(p entql.Int64P) {
	f.Where(p.Field(system.FieldUpdateTime))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *SystemFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(system.FieldTitle))
}

// WhereKeywords applies the entql string predicate on the keywords field.
func (f *SystemFilter) WhereKeywords(p entql.StringP) {
	f.Where(p.Field(system.FieldKeywords))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *SystemFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(system.FieldDescription))
}

// WhereRecordNumber applies the entql string predicate on the record_number field.
func (f *SystemFilter) WhereRecordNumber(p entql.StringP) {
	f.Where(p.Field(system.FieldRecordNumber))
}

// WhereTheme applies the entql int32 predicate on the Theme field.
func (f *SystemFilter) WhereTheme(p entql.Int32P) {
	f.Where(p.Field(system.FieldTheme))
}

// addPredicate implements the predicateAdder interface.
func (tq *TagQuery) addPredicate(pred func(s *sql.Selector)) {
	tq.predicates = append(tq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TagQuery builder.
func (tq *TagQuery) Filter() *TagFilter {
	return &TagFilter{config: tq.config, predicateAdder: tq}
}

// addPredicate implements the predicateAdder interface.
func (m *TagMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TagMutation builder.
func (m *TagMutation) Filter() *TagFilter {
	return &TagFilter{config: m.config, predicateAdder: m}
}

// TagFilter provides a generic filtering capability at runtime for TagQuery.
type TagFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TagFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *TagFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(tag.FieldID))
}

// WhereCreateTime applies the entql int64 predicate on the create_time field.
func (f *TagFilter) WhereCreateTime(p entql.Int64P) {
	f.Where(p.Field(tag.FieldCreateTime))
}

// WhereUpdateTime applies the entql int64 predicate on the update_time field.
func (f *TagFilter) WhereUpdateTime(p entql.Int64P) {
	f.Where(p.Field(tag.FieldUpdateTime))
}

// WhereName applies the entql string predicate on the name field.
func (f *TagFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(tag.FieldName))
}

// WhereDisplayName applies the entql string predicate on the display_name field.
func (f *TagFilter) WhereDisplayName(p entql.StringP) {
	f.Where(p.Field(tag.FieldDisplayName))
}

// WhereSeoDesc applies the entql string predicate on the seo_desc field.
func (f *TagFilter) WhereSeoDesc(p entql.StringP) {
	f.Where(p.Field(tag.FieldSeoDesc))
}

// WhereUseCount applies the entql int32 predicate on the use_count field.
func (f *TagFilter) WhereUseCount(p entql.Int32P) {
	f.Where(p.Field(tag.FieldUseCount))
}

// addPredicate implements the predicateAdder interface.
func (uq *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	uq.predicates = append(uq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (uq *UserQuery) Filter() *UserFilter {
	return &UserFilter{config: uq.config, predicateAdder: uq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{config: m.config, predicateAdder: m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *UserFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(user.FieldID))
}

// WhereCreateTime applies the entql int64 predicate on the create_time field.
func (f *UserFilter) WhereCreateTime(p entql.Int64P) {
	f.Where(p.Field(user.FieldCreateTime))
}

// WhereUpdateTime applies the entql int64 predicate on the update_time field.
func (f *UserFilter) WhereUpdateTime(p entql.Int64P) {
	f.Where(p.Field(user.FieldUpdateTime))
}

// WhereUsername applies the entql string predicate on the username field.
func (f *UserFilter) WhereUsername(p entql.StringP) {
	f.Where(p.Field(user.FieldUsername))
}

// WhereNickname applies the entql string predicate on the nickname field.
func (f *UserFilter) WhereNickname(p entql.StringP) {
	f.Where(p.Field(user.FieldNickname))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *UserFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(user.FieldEmail))
}

// WherePassword applies the entql string predicate on the password field.
func (f *UserFilter) WherePassword(p entql.StringP) {
	f.Where(p.Field(user.FieldPassword))
}
