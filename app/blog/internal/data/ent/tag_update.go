// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-blog/app/blog/internal/data/ent/predicate"
	"kratos-blog/app/blog/internal/data/ent/tag"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TagUpdate is the builder for updating Tag entities.
type TagUpdate struct {
	config
	hooks     []Hook
	mutation  *TagMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TagUpdate builder.
func (tu *TagUpdate) Where(ps ...predicate.Tag) *TagUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetUpdateTime sets the "update_time" field.
func (tu *TagUpdate) SetUpdateTime(i int64) *TagUpdate {
	tu.mutation.ResetUpdateTime()
	tu.mutation.SetUpdateTime(i)
	return tu
}

// AddUpdateTime adds i to the "update_time" field.
func (tu *TagUpdate) AddUpdateTime(i int64) *TagUpdate {
	tu.mutation.AddUpdateTime(i)
	return tu
}

// ClearUpdateTime clears the value of the "update_time" field.
func (tu *TagUpdate) ClearUpdateTime() *TagUpdate {
	tu.mutation.ClearUpdateTime()
	return tu
}

// SetName sets the "name" field.
func (tu *TagUpdate) SetName(s string) *TagUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tu *TagUpdate) SetNillableName(s *string) *TagUpdate {
	if s != nil {
		tu.SetName(*s)
	}
	return tu
}

// ClearName clears the value of the "name" field.
func (tu *TagUpdate) ClearName() *TagUpdate {
	tu.mutation.ClearName()
	return tu
}

// SetDisplayName sets the "display_name" field.
func (tu *TagUpdate) SetDisplayName(s string) *TagUpdate {
	tu.mutation.SetDisplayName(s)
	return tu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (tu *TagUpdate) SetNillableDisplayName(s *string) *TagUpdate {
	if s != nil {
		tu.SetDisplayName(*s)
	}
	return tu
}

// ClearDisplayName clears the value of the "display_name" field.
func (tu *TagUpdate) ClearDisplayName() *TagUpdate {
	tu.mutation.ClearDisplayName()
	return tu
}

// SetSeoDesc sets the "seo_desc" field.
func (tu *TagUpdate) SetSeoDesc(s string) *TagUpdate {
	tu.mutation.SetSeoDesc(s)
	return tu
}

// SetNillableSeoDesc sets the "seo_desc" field if the given value is not nil.
func (tu *TagUpdate) SetNillableSeoDesc(s *string) *TagUpdate {
	if s != nil {
		tu.SetSeoDesc(*s)
	}
	return tu
}

// ClearSeoDesc clears the value of the "seo_desc" field.
func (tu *TagUpdate) ClearSeoDesc() *TagUpdate {
	tu.mutation.ClearSeoDesc()
	return tu
}

// SetUseCount sets the "use_count" field.
func (tu *TagUpdate) SetUseCount(i int32) *TagUpdate {
	tu.mutation.ResetUseCount()
	tu.mutation.SetUseCount(i)
	return tu
}

// SetNillableUseCount sets the "use_count" field if the given value is not nil.
func (tu *TagUpdate) SetNillableUseCount(i *int32) *TagUpdate {
	if i != nil {
		tu.SetUseCount(*i)
	}
	return tu
}

// AddUseCount adds i to the "use_count" field.
func (tu *TagUpdate) AddUseCount(i int32) *TagUpdate {
	tu.mutation.AddUseCount(i)
	return tu
}

// ClearUseCount clears the value of the "use_count" field.
func (tu *TagUpdate) ClearUseCount() *TagUpdate {
	tu.mutation.ClearUseCount()
	return tu
}

// Mutation returns the TagMutation object of the builder.
func (tu *TagUpdate) Mutation() *TagMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TagUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	tu.defaults()
	if len(tu.hooks) == 0 {
		if err = tu.check(); err != nil {
			return 0, err
		}
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TagMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tu.check(); err != nil {
				return 0, err
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			if tu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TagUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TagUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TagUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TagUpdate) defaults() {
	if _, ok := tu.mutation.UpdateTime(); !ok && !tu.mutation.UpdateTimeCleared() {
		v := tag.UpdateDefaultUpdateTime()
		tu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TagUpdate) check() error {
	if v, ok := tu.mutation.Name(); ok {
		if err := tag.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Tag.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tu *TagUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TagUpdate {
	tu.modifiers = append(tu.modifiers, modifiers...)
	return tu
}

func (tu *TagUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tag.Table,
			Columns: tag.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: tag.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if tu.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: tag.FieldCreateTime,
		})
	}
	if value, ok := tu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tag.FieldUpdateTime,
		})
	}
	if value, ok := tu.mutation.AddedUpdateTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tag.FieldUpdateTime,
		})
	}
	if tu.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: tag.FieldUpdateTime,
		})
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tag.FieldName,
		})
	}
	if tu.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: tag.FieldName,
		})
	}
	if value, ok := tu.mutation.DisplayName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tag.FieldDisplayName,
		})
	}
	if tu.mutation.DisplayNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: tag.FieldDisplayName,
		})
	}
	if value, ok := tu.mutation.SeoDesc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tag.FieldSeoDesc,
		})
	}
	if tu.mutation.SeoDescCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: tag.FieldSeoDesc,
		})
	}
	if value, ok := tu.mutation.UseCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: tag.FieldUseCount,
		})
	}
	if value, ok := tu.mutation.AddedUseCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: tag.FieldUseCount,
		})
	}
	if tu.mutation.UseCountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: tag.FieldUseCount,
		})
	}
	_spec.Modifiers = tu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// TagUpdateOne is the builder for updating a single Tag entity.
type TagUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TagMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdateTime sets the "update_time" field.
func (tuo *TagUpdateOne) SetUpdateTime(i int64) *TagUpdateOne {
	tuo.mutation.ResetUpdateTime()
	tuo.mutation.SetUpdateTime(i)
	return tuo
}

// AddUpdateTime adds i to the "update_time" field.
func (tuo *TagUpdateOne) AddUpdateTime(i int64) *TagUpdateOne {
	tuo.mutation.AddUpdateTime(i)
	return tuo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (tuo *TagUpdateOne) ClearUpdateTime() *TagUpdateOne {
	tuo.mutation.ClearUpdateTime()
	return tuo
}

// SetName sets the "name" field.
func (tuo *TagUpdateOne) SetName(s string) *TagUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tuo *TagUpdateOne) SetNillableName(s *string) *TagUpdateOne {
	if s != nil {
		tuo.SetName(*s)
	}
	return tuo
}

// ClearName clears the value of the "name" field.
func (tuo *TagUpdateOne) ClearName() *TagUpdateOne {
	tuo.mutation.ClearName()
	return tuo
}

// SetDisplayName sets the "display_name" field.
func (tuo *TagUpdateOne) SetDisplayName(s string) *TagUpdateOne {
	tuo.mutation.SetDisplayName(s)
	return tuo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (tuo *TagUpdateOne) SetNillableDisplayName(s *string) *TagUpdateOne {
	if s != nil {
		tuo.SetDisplayName(*s)
	}
	return tuo
}

// ClearDisplayName clears the value of the "display_name" field.
func (tuo *TagUpdateOne) ClearDisplayName() *TagUpdateOne {
	tuo.mutation.ClearDisplayName()
	return tuo
}

// SetSeoDesc sets the "seo_desc" field.
func (tuo *TagUpdateOne) SetSeoDesc(s string) *TagUpdateOne {
	tuo.mutation.SetSeoDesc(s)
	return tuo
}

// SetNillableSeoDesc sets the "seo_desc" field if the given value is not nil.
func (tuo *TagUpdateOne) SetNillableSeoDesc(s *string) *TagUpdateOne {
	if s != nil {
		tuo.SetSeoDesc(*s)
	}
	return tuo
}

// ClearSeoDesc clears the value of the "seo_desc" field.
func (tuo *TagUpdateOne) ClearSeoDesc() *TagUpdateOne {
	tuo.mutation.ClearSeoDesc()
	return tuo
}

// SetUseCount sets the "use_count" field.
func (tuo *TagUpdateOne) SetUseCount(i int32) *TagUpdateOne {
	tuo.mutation.ResetUseCount()
	tuo.mutation.SetUseCount(i)
	return tuo
}

// SetNillableUseCount sets the "use_count" field if the given value is not nil.
func (tuo *TagUpdateOne) SetNillableUseCount(i *int32) *TagUpdateOne {
	if i != nil {
		tuo.SetUseCount(*i)
	}
	return tuo
}

// AddUseCount adds i to the "use_count" field.
func (tuo *TagUpdateOne) AddUseCount(i int32) *TagUpdateOne {
	tuo.mutation.AddUseCount(i)
	return tuo
}

// ClearUseCount clears the value of the "use_count" field.
func (tuo *TagUpdateOne) ClearUseCount() *TagUpdateOne {
	tuo.mutation.ClearUseCount()
	return tuo
}

// Mutation returns the TagMutation object of the builder.
func (tuo *TagUpdateOne) Mutation() *TagMutation {
	return tuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TagUpdateOne) Select(field string, fields ...string) *TagUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Tag entity.
func (tuo *TagUpdateOne) Save(ctx context.Context) (*Tag, error) {
	var (
		err  error
		node *Tag
	)
	tuo.defaults()
	if len(tuo.hooks) == 0 {
		if err = tuo.check(); err != nil {
			return nil, err
		}
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TagMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tuo.check(); err != nil {
				return nil, err
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			if tuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Tag)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TagMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TagUpdateOne) SaveX(ctx context.Context) *Tag {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TagUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TagUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TagUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdateTime(); !ok && !tuo.mutation.UpdateTimeCleared() {
		v := tag.UpdateDefaultUpdateTime()
		tuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TagUpdateOne) check() error {
	if v, ok := tuo.mutation.Name(); ok {
		if err := tag.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Tag.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tuo *TagUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TagUpdateOne {
	tuo.modifiers = append(tuo.modifiers, modifiers...)
	return tuo
}

func (tuo *TagUpdateOne) sqlSave(ctx context.Context) (_node *Tag, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tag.Table,
			Columns: tag.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: tag.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Tag.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tag.FieldID)
		for _, f := range fields {
			if !tag.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tag.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if tuo.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: tag.FieldCreateTime,
		})
	}
	if value, ok := tuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tag.FieldUpdateTime,
		})
	}
	if value, ok := tuo.mutation.AddedUpdateTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tag.FieldUpdateTime,
		})
	}
	if tuo.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: tag.FieldUpdateTime,
		})
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tag.FieldName,
		})
	}
	if tuo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: tag.FieldName,
		})
	}
	if value, ok := tuo.mutation.DisplayName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tag.FieldDisplayName,
		})
	}
	if tuo.mutation.DisplayNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: tag.FieldDisplayName,
		})
	}
	if value, ok := tuo.mutation.SeoDesc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tag.FieldSeoDesc,
		})
	}
	if tuo.mutation.SeoDescCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: tag.FieldSeoDesc,
		})
	}
	if value, ok := tuo.mutation.UseCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: tag.FieldUseCount,
		})
	}
	if value, ok := tuo.mutation.AddedUseCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: tag.FieldUseCount,
		})
	}
	if tuo.mutation.UseCountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: tag.FieldUseCount,
		})
	}
	_spec.Modifiers = tuo.modifiers
	_node = &Tag{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
