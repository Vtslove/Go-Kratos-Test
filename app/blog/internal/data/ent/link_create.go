// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-blog/app/blog/internal/data/ent/link"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LinkCreate is the builder for creating a Link entity.
type LinkCreate struct {
	config
	mutation *LinkMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (lc *LinkCreate) SetCreateTime(i int64) *LinkCreate {
	lc.mutation.SetCreateTime(i)
	return lc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (lc *LinkCreate) SetNillableCreateTime(i *int64) *LinkCreate {
	if i != nil {
		lc.SetCreateTime(*i)
	}
	return lc
}

// SetUpdateTime sets the "update_time" field.
func (lc *LinkCreate) SetUpdateTime(i int64) *LinkCreate {
	lc.mutation.SetUpdateTime(i)
	return lc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (lc *LinkCreate) SetNillableUpdateTime(i *int64) *LinkCreate {
	if i != nil {
		lc.SetUpdateTime(*i)
	}
	return lc
}

// SetName sets the "name" field.
func (lc *LinkCreate) SetName(s string) *LinkCreate {
	lc.mutation.SetName(s)
	return lc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (lc *LinkCreate) SetNillableName(s *string) *LinkCreate {
	if s != nil {
		lc.SetName(*s)
	}
	return lc
}

// SetLink sets the "link" field.
func (lc *LinkCreate) SetLink(s string) *LinkCreate {
	lc.mutation.SetLink(s)
	return lc
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (lc *LinkCreate) SetNillableLink(s *string) *LinkCreate {
	if s != nil {
		lc.SetLink(*s)
	}
	return lc
}

// SetOrderID sets the "order_id" field.
func (lc *LinkCreate) SetOrderID(i int32) *LinkCreate {
	lc.mutation.SetOrderID(i)
	return lc
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (lc *LinkCreate) SetNillableOrderID(i *int32) *LinkCreate {
	if i != nil {
		lc.SetOrderID(*i)
	}
	return lc
}

// SetID sets the "id" field.
func (lc *LinkCreate) SetID(u uint64) *LinkCreate {
	lc.mutation.SetID(u)
	return lc
}

// Mutation returns the LinkMutation object of the builder.
func (lc *LinkCreate) Mutation() *LinkMutation {
	return lc.mutation
}

// Save creates the Link in the database.
func (lc *LinkCreate) Save(ctx context.Context) (*Link, error) {
	var (
		err  error
		node *Link
	)
	if len(lc.hooks) == 0 {
		if err = lc.check(); err != nil {
			return nil, err
		}
		node, err = lc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LinkMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = lc.check(); err != nil {
				return nil, err
			}
			lc.mutation = mutation
			if node, err = lc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(lc.hooks) - 1; i >= 0; i-- {
			if lc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = lc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, lc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Link)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from LinkMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LinkCreate) SaveX(ctx context.Context) *Link {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lc *LinkCreate) Exec(ctx context.Context) error {
	_, err := lc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lc *LinkCreate) ExecX(ctx context.Context) {
	if err := lc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lc *LinkCreate) check() error {
	if v, ok := lc.mutation.Name(); ok {
		if err := link.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Link.name": %w`, err)}
		}
	}
	if v, ok := lc.mutation.ID(); ok {
		if err := link.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Link.id": %w`, err)}
		}
	}
	return nil
}

func (lc *LinkCreate) sqlSave(ctx context.Context) (*Link, error) {
	_node, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (lc *LinkCreate) createSpec() (*Link, *sqlgraph.CreateSpec) {
	var (
		_node = &Link{config: lc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: link.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: link.FieldID,
			},
		}
	)
	_spec.OnConflict = lc.conflict
	if id, ok := lc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := lc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: link.FieldCreateTime,
		})
		_node.CreateTime = &value
	}
	if value, ok := lc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: link.FieldUpdateTime,
		})
		_node.UpdateTime = &value
	}
	if value, ok := lc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: link.FieldName,
		})
		_node.Name = &value
	}
	if value, ok := lc.mutation.Link(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: link.FieldLink,
		})
		_node.Link = &value
	}
	if value, ok := lc.mutation.OrderID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: link.FieldOrderID,
		})
		_node.OrderID = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Link.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LinkUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
//
func (lc *LinkCreate) OnConflict(opts ...sql.ConflictOption) *LinkUpsertOne {
	lc.conflict = opts
	return &LinkUpsertOne{
		create: lc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Link.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (lc *LinkCreate) OnConflictColumns(columns ...string) *LinkUpsertOne {
	lc.conflict = append(lc.conflict, sql.ConflictColumns(columns...))
	return &LinkUpsertOne{
		create: lc,
	}
}

type (
	// LinkUpsertOne is the builder for "upsert"-ing
	//  one Link node.
	LinkUpsertOne struct {
		create *LinkCreate
	}

	// LinkUpsert is the "OnConflict" setter.
	LinkUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreateTime sets the "create_time" field.
func (u *LinkUpsert) SetCreateTime(v int64) *LinkUpsert {
	u.Set(link.FieldCreateTime, v)
	return u
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *LinkUpsert) UpdateCreateTime() *LinkUpsert {
	u.SetExcluded(link.FieldCreateTime)
	return u
}

// AddCreateTime adds v to the "create_time" field.
func (u *LinkUpsert) AddCreateTime(v int64) *LinkUpsert {
	u.Add(link.FieldCreateTime, v)
	return u
}

// ClearCreateTime clears the value of the "create_time" field.
func (u *LinkUpsert) ClearCreateTime() *LinkUpsert {
	u.SetNull(link.FieldCreateTime)
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *LinkUpsert) SetUpdateTime(v int64) *LinkUpsert {
	u.Set(link.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *LinkUpsert) UpdateUpdateTime() *LinkUpsert {
	u.SetExcluded(link.FieldUpdateTime)
	return u
}

// AddUpdateTime adds v to the "update_time" field.
func (u *LinkUpsert) AddUpdateTime(v int64) *LinkUpsert {
	u.Add(link.FieldUpdateTime, v)
	return u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *LinkUpsert) ClearUpdateTime() *LinkUpsert {
	u.SetNull(link.FieldUpdateTime)
	return u
}

// SetName sets the "name" field.
func (u *LinkUpsert) SetName(v string) *LinkUpsert {
	u.Set(link.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *LinkUpsert) UpdateName() *LinkUpsert {
	u.SetExcluded(link.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *LinkUpsert) ClearName() *LinkUpsert {
	u.SetNull(link.FieldName)
	return u
}

// SetLink sets the "link" field.
func (u *LinkUpsert) SetLink(v string) *LinkUpsert {
	u.Set(link.FieldLink, v)
	return u
}

// UpdateLink sets the "link" field to the value that was provided on create.
func (u *LinkUpsert) UpdateLink() *LinkUpsert {
	u.SetExcluded(link.FieldLink)
	return u
}

// ClearLink clears the value of the "link" field.
func (u *LinkUpsert) ClearLink() *LinkUpsert {
	u.SetNull(link.FieldLink)
	return u
}

// SetOrderID sets the "order_id" field.
func (u *LinkUpsert) SetOrderID(v int32) *LinkUpsert {
	u.Set(link.FieldOrderID, v)
	return u
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *LinkUpsert) UpdateOrderID() *LinkUpsert {
	u.SetExcluded(link.FieldOrderID)
	return u
}

// AddOrderID adds v to the "order_id" field.
func (u *LinkUpsert) AddOrderID(v int32) *LinkUpsert {
	u.Add(link.FieldOrderID, v)
	return u
}

// ClearOrderID clears the value of the "order_id" field.
func (u *LinkUpsert) ClearOrderID() *LinkUpsert {
	u.SetNull(link.FieldOrderID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Link.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(link.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *LinkUpsertOne) UpdateNewValues() *LinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(link.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(link.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Link.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *LinkUpsertOne) Ignore() *LinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LinkUpsertOne) DoNothing() *LinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LinkCreate.OnConflict
// documentation for more info.
func (u *LinkUpsertOne) Update(set func(*LinkUpsert)) *LinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LinkUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *LinkUpsertOne) SetCreateTime(v int64) *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.SetCreateTime(v)
	})
}

// AddCreateTime adds v to the "create_time" field.
func (u *LinkUpsertOne) AddCreateTime(v int64) *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.AddCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *LinkUpsertOne) UpdateCreateTime() *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.UpdateCreateTime()
	})
}

// ClearCreateTime clears the value of the "create_time" field.
func (u *LinkUpsertOne) ClearCreateTime() *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.ClearCreateTime()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *LinkUpsertOne) SetUpdateTime(v int64) *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.SetUpdateTime(v)
	})
}

// AddUpdateTime adds v to the "update_time" field.
func (u *LinkUpsertOne) AddUpdateTime(v int64) *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.AddUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *LinkUpsertOne) UpdateUpdateTime() *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *LinkUpsertOne) ClearUpdateTime() *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.ClearUpdateTime()
	})
}

// SetName sets the "name" field.
func (u *LinkUpsertOne) SetName(v string) *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *LinkUpsertOne) UpdateName() *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *LinkUpsertOne) ClearName() *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.ClearName()
	})
}

// SetLink sets the "link" field.
func (u *LinkUpsertOne) SetLink(v string) *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.SetLink(v)
	})
}

// UpdateLink sets the "link" field to the value that was provided on create.
func (u *LinkUpsertOne) UpdateLink() *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.UpdateLink()
	})
}

// ClearLink clears the value of the "link" field.
func (u *LinkUpsertOne) ClearLink() *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.ClearLink()
	})
}

// SetOrderID sets the "order_id" field.
func (u *LinkUpsertOne) SetOrderID(v int32) *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.SetOrderID(v)
	})
}

// AddOrderID adds v to the "order_id" field.
func (u *LinkUpsertOne) AddOrderID(v int32) *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.AddOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *LinkUpsertOne) UpdateOrderID() *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *LinkUpsertOne) ClearOrderID() *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.ClearOrderID()
	})
}

// Exec executes the query.
func (u *LinkUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LinkCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LinkUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *LinkUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *LinkUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// LinkCreateBulk is the builder for creating many Link entities in bulk.
type LinkCreateBulk struct {
	config
	builders []*LinkCreate
	conflict []sql.ConflictOption
}

// Save creates the Link entities in the database.
func (lcb *LinkCreateBulk) Save(ctx context.Context) ([]*Link, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lcb.builders))
	nodes := make([]*Link, len(lcb.builders))
	mutators := make([]Mutator, len(lcb.builders))
	for i := range lcb.builders {
		func(i int, root context.Context) {
			builder := lcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LinkMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = lcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcb *LinkCreateBulk) SaveX(ctx context.Context) []*Link {
	v, err := lcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcb *LinkCreateBulk) Exec(ctx context.Context) error {
	_, err := lcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcb *LinkCreateBulk) ExecX(ctx context.Context) {
	if err := lcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Link.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LinkUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
//
func (lcb *LinkCreateBulk) OnConflict(opts ...sql.ConflictOption) *LinkUpsertBulk {
	lcb.conflict = opts
	return &LinkUpsertBulk{
		create: lcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Link.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (lcb *LinkCreateBulk) OnConflictColumns(columns ...string) *LinkUpsertBulk {
	lcb.conflict = append(lcb.conflict, sql.ConflictColumns(columns...))
	return &LinkUpsertBulk{
		create: lcb,
	}
}

// LinkUpsertBulk is the builder for "upsert"-ing
// a bulk of Link nodes.
type LinkUpsertBulk struct {
	create *LinkCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Link.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(link.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *LinkUpsertBulk) UpdateNewValues() *LinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(link.FieldID)
				return
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(link.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Link.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *LinkUpsertBulk) Ignore() *LinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LinkUpsertBulk) DoNothing() *LinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LinkCreateBulk.OnConflict
// documentation for more info.
func (u *LinkUpsertBulk) Update(set func(*LinkUpsert)) *LinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LinkUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *LinkUpsertBulk) SetCreateTime(v int64) *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.SetCreateTime(v)
	})
}

// AddCreateTime adds v to the "create_time" field.
func (u *LinkUpsertBulk) AddCreateTime(v int64) *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.AddCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *LinkUpsertBulk) UpdateCreateTime() *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.UpdateCreateTime()
	})
}

// ClearCreateTime clears the value of the "create_time" field.
func (u *LinkUpsertBulk) ClearCreateTime() *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.ClearCreateTime()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *LinkUpsertBulk) SetUpdateTime(v int64) *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.SetUpdateTime(v)
	})
}

// AddUpdateTime adds v to the "update_time" field.
func (u *LinkUpsertBulk) AddUpdateTime(v int64) *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.AddUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *LinkUpsertBulk) UpdateUpdateTime() *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *LinkUpsertBulk) ClearUpdateTime() *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.ClearUpdateTime()
	})
}

// SetName sets the "name" field.
func (u *LinkUpsertBulk) SetName(v string) *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *LinkUpsertBulk) UpdateName() *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *LinkUpsertBulk) ClearName() *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.ClearName()
	})
}

// SetLink sets the "link" field.
func (u *LinkUpsertBulk) SetLink(v string) *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.SetLink(v)
	})
}

// UpdateLink sets the "link" field to the value that was provided on create.
func (u *LinkUpsertBulk) UpdateLink() *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.UpdateLink()
	})
}

// ClearLink clears the value of the "link" field.
func (u *LinkUpsertBulk) ClearLink() *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.ClearLink()
	})
}

// SetOrderID sets the "order_id" field.
func (u *LinkUpsertBulk) SetOrderID(v int32) *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.SetOrderID(v)
	})
}

// AddOrderID adds v to the "order_id" field.
func (u *LinkUpsertBulk) AddOrderID(v int32) *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.AddOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *LinkUpsertBulk) UpdateOrderID() *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *LinkUpsertBulk) ClearOrderID() *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.ClearOrderID()
	})
}

// Exec executes the query.
func (u *LinkUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the LinkCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LinkCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LinkUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
