// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"kratos-blog/app/blog/internal/data/ent/system"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// System is the model entity for the System schema.
type System struct {
	config `json:"-"`
	// ID of the ent.
	// id
	ID uint64 `json:"id,omitempty"`
	// 创建时间
	CreateTime *int64 `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime *int64 `json:"update_time,omitempty"`
	// Title holds the value of the "title" field.
	Title *string `json:"title,omitempty"`
	// Keywords holds the value of the "keywords" field.
	Keywords *string `json:"keywords,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// RecordNumber holds the value of the "record_number" field.
	RecordNumber *string `json:"record_number,omitempty"`
	// Theme holds the value of the "Theme" field.
	Theme *int32 `json:"Theme,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*System) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case system.FieldID, system.FieldCreateTime, system.FieldUpdateTime, system.FieldTheme:
			values[i] = new(sql.NullInt64)
		case system.FieldTitle, system.FieldKeywords, system.FieldDescription, system.FieldRecordNumber:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type System", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the System fields.
func (s *System) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case system.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = uint64(value.Int64)
		case system.FieldCreateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				s.CreateTime = new(int64)
				*s.CreateTime = value.Int64
			}
		case system.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				s.UpdateTime = new(int64)
				*s.UpdateTime = value.Int64
			}
		case system.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				s.Title = new(string)
				*s.Title = value.String
			}
		case system.FieldKeywords:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field keywords", values[i])
			} else if value.Valid {
				s.Keywords = new(string)
				*s.Keywords = value.String
			}
		case system.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				s.Description = new(string)
				*s.Description = value.String
			}
		case system.FieldRecordNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field record_number", values[i])
			} else if value.Valid {
				s.RecordNumber = new(string)
				*s.RecordNumber = value.String
			}
		case system.FieldTheme:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Theme", values[i])
			} else if value.Valid {
				s.Theme = new(int32)
				*s.Theme = int32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this System.
// Note that you need to call System.Unwrap() before calling this method if this System
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *System) Update() *SystemUpdateOne {
	return (&SystemClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the System entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *System) Unwrap() *System {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: System is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *System) String() string {
	var builder strings.Builder
	builder.WriteString("System(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	if v := s.CreateTime; v != nil {
		builder.WriteString("create_time=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := s.UpdateTime; v != nil {
		builder.WriteString("update_time=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := s.Title; v != nil {
		builder.WriteString("title=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := s.Keywords; v != nil {
		builder.WriteString("keywords=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := s.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := s.RecordNumber; v != nil {
		builder.WriteString("record_number=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := s.Theme; v != nil {
		builder.WriteString("Theme=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Systems is a parsable slice of System.
type Systems []*System

func (s Systems) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
