// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// CategoryColumns holds the columns for the "category" table.
	CategoryColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true, SchemaType: map[string]string{"mysql": "bigint", "postgres": "bigserial"}},
		{Name: "create_time", Type: field.TypeInt64, Nullable: true, Default: "((EXTRACT(EPOCH FROM CURRENT_TIMESTAMP) * 1000)::BIGINT)"},
		{Name: "update_time", Type: field.TypeInt64, Nullable: true, Default: "((EXTRACT(EPOCH FROM CURRENT_TIMESTAMP) * 1000)::BIGINT)"},
		{Name: "name", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "display_name", Type: field.TypeString, Nullable: true},
		{Name: "seo_desc", Type: field.TypeString, Nullable: true},
		{Name: "parent_id", Type: field.TypeUint64, Nullable: true},
	}
	// CategoryTable holds the schema information for the "category" table.
	CategoryTable = &schema.Table{
		Name:       "category",
		Columns:    CategoryColumns,
		PrimaryKey: []*schema.Column{CategoryColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "category_id",
				Unique:  false,
				Columns: []*schema.Column{CategoryColumns[0]},
			},
			{
				Name:    "category_pkey",
				Unique:  false,
				Columns: []*schema.Column{CategoryColumns[0]},
			},
		},
	}
	// LinkColumns holds the columns for the "link" table.
	LinkColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true, SchemaType: map[string]string{"mysql": "bigint", "postgres": "bigserial"}},
		{Name: "create_time", Type: field.TypeInt64, Nullable: true, Default: "((EXTRACT(EPOCH FROM CURRENT_TIMESTAMP) * 1000)::BIGINT)"},
		{Name: "update_time", Type: field.TypeInt64, Nullable: true, Default: "((EXTRACT(EPOCH FROM CURRENT_TIMESTAMP) * 1000)::BIGINT)"},
		{Name: "name", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "link", Type: field.TypeString, Nullable: true},
		{Name: "order_id", Type: field.TypeInt32, Nullable: true},
	}
	// LinkTable holds the schema information for the "link" table.
	LinkTable = &schema.Table{
		Name:       "link",
		Columns:    LinkColumns,
		PrimaryKey: []*schema.Column{LinkColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "link_id",
				Unique:  false,
				Columns: []*schema.Column{LinkColumns[0]},
			},
			{
				Name:    "link_pkey",
				Unique:  false,
				Columns: []*schema.Column{LinkColumns[0]},
			},
		},
	}
	// PostColumns holds the columns for the "post" table.
	PostColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true, SchemaType: map[string]string{"mysql": "bigint", "postgres": "bigserial"}},
		{Name: "create_time", Type: field.TypeInt64, Nullable: true, Default: "((EXTRACT(EPOCH FROM CURRENT_TIMESTAMP) * 1000)::BIGINT)"},
		{Name: "update_time", Type: field.TypeInt64, Nullable: true, Default: "((EXTRACT(EPOCH FROM CURRENT_TIMESTAMP) * 1000)::BIGINT)"},
		{Name: "title", Type: field.TypeString, Nullable: true},
		{Name: "summary", Type: field.TypeString, Nullable: true},
		{Name: "original", Type: field.TypeString, Nullable: true},
		{Name: "content", Type: field.TypeString, Nullable: true},
		{Name: "password", Type: field.TypeString, Nullable: true},
		{Name: "user_id", Type: field.TypeInt64, Nullable: true},
	}
	// PostTable holds the schema information for the "post" table.
	PostTable = &schema.Table{
		Name:       "post",
		Columns:    PostColumns,
		PrimaryKey: []*schema.Column{PostColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "post_id",
				Unique:  false,
				Columns: []*schema.Column{PostColumns[0]},
			},
			{
				Name:    "post_pkey",
				Unique:  false,
				Columns: []*schema.Column{PostColumns[0]},
			},
		},
	}
	// SystemColumns holds the columns for the "system" table.
	SystemColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true, SchemaType: map[string]string{"mysql": "bigint", "postgres": "bigserial"}},
		{Name: "create_time", Type: field.TypeInt64, Nullable: true, Default: "((EXTRACT(EPOCH FROM CURRENT_TIMESTAMP) * 1000)::BIGINT)"},
		{Name: "update_time", Type: field.TypeInt64, Nullable: true, Default: "((EXTRACT(EPOCH FROM CURRENT_TIMESTAMP) * 1000)::BIGINT)"},
		{Name: "title", Type: field.TypeString, Nullable: true},
		{Name: "keywords", Type: field.TypeString, Nullable: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "record_number", Type: field.TypeString, Nullable: true},
		{Name: "theme", Type: field.TypeInt32, Nullable: true},
	}
	// SystemTable holds the schema information for the "system" table.
	SystemTable = &schema.Table{
		Name:       "system",
		Columns:    SystemColumns,
		PrimaryKey: []*schema.Column{SystemColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "system_id",
				Unique:  false,
				Columns: []*schema.Column{SystemColumns[0]},
			},
			{
				Name:    "system_pkey",
				Unique:  false,
				Columns: []*schema.Column{SystemColumns[0]},
			},
		},
	}
	// TagColumns holds the columns for the "tag" table.
	TagColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true, SchemaType: map[string]string{"mysql": "bigint", "postgres": "bigserial"}},
		{Name: "create_time", Type: field.TypeInt64, Nullable: true, Default: "((EXTRACT(EPOCH FROM CURRENT_TIMESTAMP) * 1000)::BIGINT)"},
		{Name: "update_time", Type: field.TypeInt64, Nullable: true, Default: "((EXTRACT(EPOCH FROM CURRENT_TIMESTAMP) * 1000)::BIGINT)"},
		{Name: "name", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "display_name", Type: field.TypeString, Nullable: true},
		{Name: "seo_desc", Type: field.TypeString, Nullable: true},
		{Name: "use_count", Type: field.TypeInt32, Nullable: true},
	}
	// TagTable holds the schema information for the "tag" table.
	TagTable = &schema.Table{
		Name:       "tag",
		Columns:    TagColumns,
		PrimaryKey: []*schema.Column{TagColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "tag_id",
				Unique:  false,
				Columns: []*schema.Column{TagColumns[0]},
			},
			{
				Name:    "tag_pkey",
				Unique:  false,
				Columns: []*schema.Column{TagColumns[0]},
			},
		},
	}
	// UserColumns holds the columns for the "user" table.
	UserColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true, SchemaType: map[string]string{"mysql": "bigint", "postgres": "bigserial"}},
		{Name: "create_time", Type: field.TypeInt64, Nullable: true, Default: "((EXTRACT(EPOCH FROM CURRENT_TIMESTAMP) * 1000)::BIGINT)"},
		{Name: "update_time", Type: field.TypeInt64, Nullable: true, Default: "((EXTRACT(EPOCH FROM CURRENT_TIMESTAMP) * 1000)::BIGINT)"},
		{Name: "username", Type: field.TypeString, Unique: true, Nullable: true, Size: 128},
		{Name: "nickname", Type: field.TypeString, Nullable: true, Size: 128},
		{Name: "email", Type: field.TypeString, Nullable: true, Size: 254},
		{Name: "password", Type: field.TypeString, Unique: true, Nullable: true, Size: 255},
	}
	// UserTable holds the schema information for the "user" table.
	UserTable = &schema.Table{
		Name:       "user",
		Columns:    UserColumns,
		PrimaryKey: []*schema.Column{UserColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "user_id",
				Unique:  false,
				Columns: []*schema.Column{UserColumns[0]},
			},
			{
				Name:    "user_pkey",
				Unique:  false,
				Columns: []*schema.Column{UserColumns[0]},
			},
			{
				Name:    "user_id_username",
				Unique:  true,
				Columns: []*schema.Column{UserColumns[0], UserColumns[3]},
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		CategoryTable,
		LinkTable,
		PostTable,
		SystemTable,
		TagTable,
		UserTable,
	}
)

func init() {
	CategoryTable.Annotation = &entsql.Annotation{
		Table:     "category",
		Charset:   "utf8mb4",
		Collation: "utf8mb4_bin",
	}
	LinkTable.Annotation = &entsql.Annotation{
		Table:     "link",
		Charset:   "utf8mb4",
		Collation: "utf8mb4_bin",
	}
	PostTable.Annotation = &entsql.Annotation{
		Table:     "post",
		Charset:   "utf8mb4",
		Collation: "utf8mb4_bin",
	}
	SystemTable.Annotation = &entsql.Annotation{
		Table:     "system",
		Charset:   "utf8mb4",
		Collation: "utf8mb4_bin",
	}
	TagTable.Annotation = &entsql.Annotation{
		Table:     "tag",
		Charset:   "utf8mb4",
		Collation: "utf8mb4_bin",
	}
	UserTable.Annotation = &entsql.Annotation{
		Table:     "user",
		Charset:   "utf8mb4",
		Collation: "utf8mb4_bin",
	}
}
