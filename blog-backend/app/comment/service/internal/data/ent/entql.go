// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/tx7do/kratos-blog/blog-backend/app/comment/service/internal/data/ent/comment"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 1)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   comment.Table,
			Columns: comment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: comment.FieldID,
			},
		},
		Type: "Comment",
		Fields: map[string]*sqlgraph.FieldSpec{
			comment.FieldCreateTime:        {Type: field.TypeInt64, Column: comment.FieldCreateTime},
			comment.FieldUpdateTime:        {Type: field.TypeInt64, Column: comment.FieldUpdateTime},
			comment.FieldDeleteTime:        {Type: field.TypeInt64, Column: comment.FieldDeleteTime},
			comment.FieldAuthor:            {Type: field.TypeString, Column: comment.FieldAuthor},
			comment.FieldEmail:             {Type: field.TypeString, Column: comment.FieldEmail},
			comment.FieldIPAddress:         {Type: field.TypeString, Column: comment.FieldIPAddress},
			comment.FieldAuthorURL:         {Type: field.TypeString, Column: comment.FieldAuthorURL},
			comment.FieldGravatarMd5:       {Type: field.TypeString, Column: comment.FieldGravatarMd5},
			comment.FieldContent:           {Type: field.TypeString, Column: comment.FieldContent},
			comment.FieldUserAgent:         {Type: field.TypeString, Column: comment.FieldUserAgent},
			comment.FieldAvatar:            {Type: field.TypeString, Column: comment.FieldAvatar},
			comment.FieldParentID:          {Type: field.TypeUint32, Column: comment.FieldParentID},
			comment.FieldStatus:            {Type: field.TypeUint32, Column: comment.FieldStatus},
			comment.FieldIsAdmin:           {Type: field.TypeBool, Column: comment.FieldIsAdmin},
			comment.FieldAllowNotification: {Type: field.TypeBool, Column: comment.FieldAllowNotification},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (cq *CommentQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CommentQuery builder.
func (cq *CommentQuery) Filter() *CommentFilter {
	return &CommentFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *CommentMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CommentMutation builder.
func (m *CommentMutation) Filter() *CommentFilter {
	return &CommentFilter{config: m.config, predicateAdder: m}
}

// CommentFilter provides a generic filtering capability at runtime for CommentQuery.
type CommentFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CommentFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *CommentFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(comment.FieldID))
}

// WhereCreateTime applies the entql int64 predicate on the create_time field.
func (f *CommentFilter) WhereCreateTime(p entql.Int64P) {
	f.Where(p.Field(comment.FieldCreateTime))
}

// WhereUpdateTime applies the entql int64 predicate on the update_time field.
func (f *CommentFilter) WhereUpdateTime(p entql.Int64P) {
	f.Where(p.Field(comment.FieldUpdateTime))
}

// WhereDeleteTime applies the entql int64 predicate on the delete_time field.
func (f *CommentFilter) WhereDeleteTime(p entql.Int64P) {
	f.Where(p.Field(comment.FieldDeleteTime))
}

// WhereAuthor applies the entql string predicate on the author field.
func (f *CommentFilter) WhereAuthor(p entql.StringP) {
	f.Where(p.Field(comment.FieldAuthor))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *CommentFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(comment.FieldEmail))
}

// WhereIPAddress applies the entql string predicate on the ip_address field.
func (f *CommentFilter) WhereIPAddress(p entql.StringP) {
	f.Where(p.Field(comment.FieldIPAddress))
}

// WhereAuthorURL applies the entql string predicate on the author_url field.
func (f *CommentFilter) WhereAuthorURL(p entql.StringP) {
	f.Where(p.Field(comment.FieldAuthorURL))
}

// WhereGravatarMd5 applies the entql string predicate on the gravatar_md5 field.
func (f *CommentFilter) WhereGravatarMd5(p entql.StringP) {
	f.Where(p.Field(comment.FieldGravatarMd5))
}

// WhereContent applies the entql string predicate on the content field.
func (f *CommentFilter) WhereContent(p entql.StringP) {
	f.Where(p.Field(comment.FieldContent))
}

// WhereUserAgent applies the entql string predicate on the user_agent field.
func (f *CommentFilter) WhereUserAgent(p entql.StringP) {
	f.Where(p.Field(comment.FieldUserAgent))
}

// WhereAvatar applies the entql string predicate on the avatar field.
func (f *CommentFilter) WhereAvatar(p entql.StringP) {
	f.Where(p.Field(comment.FieldAvatar))
}

// WhereParentID applies the entql uint32 predicate on the parent_id field.
func (f *CommentFilter) WhereParentID(p entql.Uint32P) {
	f.Where(p.Field(comment.FieldParentID))
}

// WhereStatus applies the entql uint32 predicate on the status field.
func (f *CommentFilter) WhereStatus(p entql.Uint32P) {
	f.Where(p.Field(comment.FieldStatus))
}

// WhereIsAdmin applies the entql bool predicate on the is_admin field.
func (f *CommentFilter) WhereIsAdmin(p entql.BoolP) {
	f.Where(p.Field(comment.FieldIsAdmin))
}

// WhereAllowNotification applies the entql bool predicate on the allow_notification field.
func (f *CommentFilter) WhereAllowNotification(p entql.BoolP) {
	f.Where(p.Field(comment.FieldAllowNotification))
}
